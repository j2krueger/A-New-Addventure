openapi: 3.1.0
info:
  title: A New Addventure
  description: "A collaborative fiction site that allows users to write stories with\
    \ multiple branches, and add branches to existing stories written by others."
  version: 1.0.0
servers:
- url: /
paths:
  /entry:
    summary: GET/POST entries
    get:
      tags:
      - Entry
      summary: GET a list of recent entries
      description: "Gets a list of recent entries, showing story title, entry title,\
        \ author, and date for each one."
      operationId: get_entry_list
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
      - Entry
      - Story
      summary: Post a new story
      description: "Post the title, author, keywords, and text of an entry to start\
        \ a new story."
      operationId: post_story
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /newStory:
    summary: GET new story page
    get:
      tags:
      - Entry
      - Story
      - StaticPage
      summary: GET the page for entering a new story
      description: "Gets the static page presented to the user for entering a new\
        \ story with text boxes for story title, entry title, keywords, and story\
        \ text. Result POSTs to /entry."
      operationId: get_new_story_page
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryID}:
    summary: GET/POST/PUT/DELETE a particular entry
    get:
      tags:
      - Entry
      summary: GET the page showing a particular entry
      description: "Gets the entry title, author, keywords, date, text, and choice\
        \ texts, formatted in HTML."
      operationId: get_entry_by_id
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    put:
      tags:
      - Entry
      summary: Edit an entry
      description: "Edit an entry's choice text, entry title, keywords, and entry\
        \ text. Can only be done by admins, mods, and the user who created the entry."
      operationId: edit_entry
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
      - Entry
      summary: "Post a continuation of entry {entryID}"
      description: "Post a new entry continuing entry {entryID} including choice text,\
        \ entry title, keywords, and entry text."
      operationId: post_entry
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    delete:
      tags:
      - Entry
      summary: Delete an entry
      description: "Delete an entry entirely if there are no continuations, otherwise\
        \ deletes choice text, entry title, deletable keywords, and entry text. Can\
        \ only be done by admins, mods, and the creating user."
      operationId: delete_entry
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /newEntry:
    summary: Static page for entering a new entry
    get:
      tags:
      - Entry
      summary: GET the page for entering a new entry
      description: "Gets the page presented to the user for entering a continuation\
        \ of an existing entry. Requested from, is inserted into, and posts to, /entry/{entryID}.\
        \ Has textboxes for choice text, entry title, keywords, and entry text."
      operationId: get_new_entry_page
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryID}/flag:
    summary: POST a flag for review on the entry
    post:
      tags:
      - Entry
      summary: Flag an entry for review
      description: "Post a flag for review, to be entered into a moderation queue.\
        \ Must include reason for flagging."
      operationId: flag_entry
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryID}/keyword/{keyword}:
    summary: GET/POST/DELETE keywords
    get:
      tags:
      - Entry
      - Keyword
      summary: Get list of keywords on entry.
      description: "Gets a list of the keywords applied to the entry. Special keywords\
        \ first, then non-special inherited keywords, then non-special non-inherited\
        \ keywords."
      operationId: get_keywords
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      - name: keyword
        in: path
        description: a keyword
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
      - Entry
      - Keyword
      summary: Post new keywords to an entry
      description: "Posts one or more keywords to be applied to an existing entry.\
        \ Admins, mods, and creating author get their new keywords automatically applied,\
        \ anyone else gets their keywords submitted to a mod queue."
      operationId: post_new_keywords
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      - name: keyword
        in: path
        description: a keyword
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    delete:
      tags:
      - Entry
      - Keyword
      summary: Delete keywords from an entry.
      description: "If given keywords are not inherited, admins, mods, and the entry\
        \ creator get the keyword deleted immediately, anyone else gets keyword deletion\
        \ request submitted to mod queue."
      operationId: delete_keywords
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      - name: keyword
        in: path
        description: a keyword
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryID}/comment:
    summary: GET/POST comments on entry
    get:
      tags:
      - Entry
      - Comment
      summary: Get comments posted to an entry
      description: Get a list of the comments that have been posted to an entry. Each
        comment entry will have the username of the user who posted it attatched.
      operationId: get_comments
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    post:
      tags:
      - Entry
      - Comment
      summary: Post a new comment.
      description: Post a new comment to an entry. Any logged in user.
      operationId: post_comment
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryID}/comment/{commentID}:
    summary: PUT/DELETE a comment
    put:
      tags:
      - Entry
      - Comment
      summary: Edit a comment.
      description: Edit a comment. Admin/mod/comment creator only.
      operationId: edit_comment
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      - name: commentID
        in: path
        description: the ID of the comment
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
    delete:
      tags:
      - Entry
      - Comment
      summary: Delete a comment.
      description: Delete a comment. Admin/mod/comment creator only.
      operationId: delete_comment
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      - name: commentID
        in: path
        description: the ID of the comment
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /entry/{entryID}/comment/{commentID}/flag:
    summary: POST a flag for review on a comment
    post:
      tags:
      - Entry
      - Comment
      - Flag
      summary: Post a flag for review on a comment
      description: "Post a flag for review on a comment, inserted into mod queue"
      operationId: flag_comment
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      - name: commentID
        in: path
        description: the ID of the comment
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /chain/{entryID}:
    summary: GET the entry chain ending at the specified entry
    get:
      tags:
      - Chain
      summary: Get the entry chain ending at the specified entry.
      description: "Get the entry chain starting with the first entry of the story\
        \ and ending at the specified entry. Show the Story title, then for each entry\
        \ show the entry title, the author, the keywords, the story text, and the\
        \ choice text for the next entry in the chain if applicable."
      operationId: get_chain
      parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Chain
  /register:
    summary: GET/POST registration
    get:
      tags:
      - User
      summary: Get registration page.
      description: "Get the statically served registration page, with text boxes for\
        \ username, email address, and password."
      operationId: get_registration_page
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: User
    post:
      tags:
      - User
      summary: Register a new user
      description: "Register a new user by posting a new username, an email address,\
        \ and a password. Check for unique username, send verification email, and\
        \ store password."
      operationId: register_user
      requestBody:
        description: Submit a request to register a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        "201":
          description: "If the registration is successful, return the username and\
            \ email fields of the user object to indicate success."
          content:
            application/json:
              examples:
                registered:
                  value: |-
                    {"user":{
                    "username": "John",
                    "email": "j_krueger@yahoo.com"
                    }}
        "401":
          description: "If the username/email don't exist, or the password is incorrect,\
            \ return an error."
          content:
            application/json:
              examples:
                duplicateUsername:
                  value: "{\"error\": \"Bad username/email or wrong password.\"}"
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /login:
    summary: GET/POST login
    get:
      tags:
      - User
      summary: Get statically served login page.
      description: "Get the statically served login page, with text boxes for username\
        \ and password."
      operationId: get_login_page
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: User
    post:
      tags:
      - User
      summary: Login user
      description: "Post the username and password, and if they match, log the user\
        \ in."
      operationId: login_user
      requestBody:
        description: Submit a request to login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            example:
              userName: Freddy
              password: s33krit!
      responses:
        "200":
          description: "If the login is successful, return the username and email\
            \ fields of the user object to indicate success."
          content:
            application/json:
              examples:
                registered:
                  value: |-
                    {"user":{
                    "username": "Freddy",
                    "email": "freddy@example.com"
                    }}
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /logout:
    summary: POST logout
    post:
      tags:
      - User
      summary: Logout the logged in user.
      description: "Logout the logged in user. Posted by a button on the users profile\
        \ page, or from the user menu."
      operationId: logout_user
      responses:
        "200":
          description: "Logout should always be successful. If user was logged in\
            \ before request, the cookie will indicate the user to log out. If user\
            \ was not logged in before request, user will still not be logged in,\
            \ so we'll call that a success condition too."
          content:
            application/json:
              examples:
                registered:
                  value: "{\"message\":{\"Logout successful.\"}}"
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /profile:
    summary: GET/PUT logged in user's profile
    get:
      tags:
      - User
      summary: Get user's profile.
      description: "If a user is logged in, get that user's settings from the server,\
        \ and show them on the page. If no user is logged in, check localStorage for\
        \ basic settings (light/dark mode, blocked tags) otherwise use default basic\
        \ settings. Can be used to change settings."
      operationId: get_profile_page
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: User
    put:
      tags:
      - User
      summary: Post changes to user's profile.
      description: "If a user is logged in, put the changed settings to the server,\
        \ otherwise store them in localStorage."
      operationId: put_profile
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /user:
    summary: GET a list of users
    get:
      tags:
      - User
      - Search
      summary: "Get a list of users, sorted alphabetically."
      description: "Get a list of users, sorted alphabetically. If there's a query\
        \ string, only return the users whose usernames contain that query string.\
        \ Each name should be linked to it's respective public profile."
      operationId: get_users
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /user/{userID}:
    summary: GET a user's public profile
    get:
      tags:
      - User
      summary: Get a user's public profile.
      description: "Get a webpage showing the specified user's public profile, including\
        \ username, bio, email if user has decided to make that public, links to entries\
        \ and comments, etc."
      operationId: get_public_profile
      parameters:
      - name: userID
        in: path
        description: the ID of the user
        required: true
        style: simple
        explode: false
        schema: {}
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: User
  /search:
    summary: GET/GET+query string search for entries
    get:
      tags:
      - Entry
      - Search
      summary: Get a list of entries selected and sorted by query string.
      description: Get a list of entries selected and sorted by query string. Default
        to all entries sorted by newest first.
      operationId: get_search_results
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Entry
  /keywords:
    summary: GET a list of defined keywords
    get:
      tags:
      - Keyword
      - Search
      summary: Get a list of defined keywords
      description: "Get a list of all used keywords, sorted alphabetically or by use\
        \ count. If a query string is used, return only matching keywords."
      operationId: get_keyword_list
      responses:
        default:
          description: Default error sample response
      x-swagger-router-controller: Keyword
components:
  schemas:
    Register:
      properties:
        userName: {}
        email: {}
        password: {}
      xml:
        name: Register
    Login:
      properties:
        userName: {}
        email: {}
        password: {}
      xml:
        name: Login
