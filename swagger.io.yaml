openapi: 3.0.3
info:
  title: A New Addventure
  version: 1.0.0
  description: >-
    A collaborative fiction site that allows users to write stories with
    multiple branches, and add branches to existing stories written by others.
paths:
  /entry:
    summary: GET/POST entries
    get:
      summary: GET a list of recent entries
      description: >-
        Gets a list of recent entries, showing story title, entry title, author,
        and date for each one.
      operationId: get_entry_list
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - List
    post:
      summary: Post a new story
      description: >-
        Post the title, author, keywords, and text of an entry to start a new
        story.
      operationId: post_story
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Story
  /newStory:
    summary: GET new story page
    get:
      summary: GET the page for entering a new story
      description: >-
        Gets the static page presented to the user for entering a new story with
        text boxes for story title, entry title, keywords, and story text.
        Result POSTs to /entry.
      operationId: get_new_story_page
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Story
        - StaticPage
  /entry/{entryID}:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
    summary: GET/POST/PUT/DELETE a particular entry
    get:
      summary: GET the page showing a particular entry
      description: >-
        Gets the entry title, author, keywords, date, text, and choice texts,
        formatted in HTML.
      operationId: get_entry_by_id
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
    post:
      summary: Post a continuation of entry {entryID}
      description: >-
        Post a new entry continuing entry {entryID} including choice text, entry
        title, keywords, and entry text.
      operationId: post_entry
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
    put:
      summary: Edit an entry
      description: >- 
        Edit an entry's choice text, entry title, keywords, and entry text. Can
        only be done by admins, mods, and the user who created the entry.
      operationId: edit_entry
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
    delete:
      summary: Delete an entry
      description: >-
        Delete an entry entirely if there are no continuations, otherwise
        deletes choice text, entry title, deletable keywords, and entry text.
        Can only be done by admins, mods, and the creating user.
      operationId: delete_entry
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
  /newEntry:
    summary: Static page for entering a new entry
    get:
      summary: GET the page for entering a new entry
      description: >-
        Gets the page presented to the user for entering a continuation of an
        existing entry. Requested from, is inserted into, and posts to,
        /entry/{entryID}. Has textboxes for choice text, entry title, keywords,
        and entry text.
      operationId: get_new_entry_page
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
  /entry/{entryID}/flag:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
    summary: POST a flag for review on the entry
    post:
      summary: Flag an entry for review
      description: >-
        Post a flag for review, to be entered into a moderation queue. Must
        include reason for flagging.
      operationId: flag_entry
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
  /entry/{entryID}/keyword/{keyword}:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
      - name: keyword
        in: path
        description: a keyword
        required: true
        schema:
          type: string
    summary: GET/POST/DELETE keywords
    get:
      summary: Get list of keywords on entry.
      description: >-
        Gets a list of the keywords applied to the entry. Special keywords
        first, then non-special inherited keywords, then non-special
        non-inherited keywords.
      operationId: get_keywords
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Keyword
    post:
      summary: Post new keywords to an entry
      description: >-
        Posts one or more keywords to be applied to an existing entry. Admins,
        mods, and creating author get their new keywords automatically applied,
        anyone else gets their keywords submitted to a mod queue.
      operationId: post_new_keywords
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Keyword
    delete:
      summary: Delete keywords from an entry.
      description: >-
        If given keywords are not inherited, admins, mods, and the entry creator
        get the keyword deleted immediately, anyone else gets keyword deletion
        request submitted to mod queue.
      operationId: delete_keywords
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Keyword
  /entry/{entryID}/comment:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
    summary: GET/POST comments on entry
    get:
      summary: Get comments posted to an entry
      description: >-
        Get a list of the comments that have been posted to an entry. Each
        comment entry will have the username of the user who posted it
        attatched.
      operationId: get_comments
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Comment
    post:
      summary: Post a new comment.
      description: >-
        Post a new comment to an entry. Any logged in user.
      operationId: post_comment
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Comment
  /entry/{entryID}/comment/{commentID}:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
      - name: commentID
        in: path
        description: the ID of the comment
        required: true
        schema:
          type: string
    summary: PUT/DELETE a comment
    put:
      summary: Edit a comment.
      description: >-
        Edit a comment. Admin/mod/comment creator only.
      operationId: edit_comment
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Comment
    delete:
      summary: Delete a comment.
      description: >-
        Delete a comment. Admin/mod/comment creator only.
      operationId: Delete a comment.
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Comment
  /entry/{entryID}/comment/{commentID}/flag:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
      - name: commentID
        in: path
        description: the ID of the comment
        required: true
        schema:
          type: string
    summary: POST a flag for review on a comment
    post:
      summary: Post a flag for review on a comment
      description: >-
        Post a flag for review on a comment, inserted into mod queue
      operationId: flag_comment
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Comment
        - Flag
  /chain/{entryID}:
    parameters:
      - name: entryID
        in: path
        description: the ID of the entry
        required: true
        schema:
          type: string
    summary: GET the entry chain ending at the specified entry
    get:
      summary: Get the entry chain ending at the specified entry.
      description: >-
        Get the entry chain starting with the first entry of the story and
        ending at the specified entry. Show the Story title, then for each entry
        show the entry title, the author, the keywords, the story text, and the
        choice text for the next entry in the chain if applicable.
      operationId: get_chain
      responses:
        default:
          description: Default error sample response
      tags:
        - Chain
  /register:
    summary: GET/POST registration
    get:
      summary: Get registration page.
      description: >-
        Get the statically served registration page, with text boxes for
        username, email address, and password.
      operationId: get_registration_page
      responses:
        default:
          description: Default error sample response
      tags:
        - User
    post:
      summary: Register a new user
      description: >-
        Register a new user by posting a new username, an email address, and a
        password. Check for unique username, send verification email, and store
        password.
      operationId: register_user
      responses:
        default:
          description: Default error sample response
      tags:
        - User
  /login:
    summary: GET/POST login
    get:
      summary: Get statically served login page.
      description: >-
        Get the statically served login page, with text boxes for username and
        password.
      operationId: get_login_page
      responses:
        default:
          description: Default error sample response
      tags:
        - User
    post:
      summary: Login user
      description: >-
        Post the username and password, and if they match, log the user in.
      operationId: login_user
      responses:
        default:
          description: Default error sample response
      tags:
        - User
  /logout:
    summary: POST logout
    post:
      summary: Logout the logged in user.
      description: >-
        Logout the logged in user. Posted by a button on the users profile page,
        or from the user menu.
      operationId: logout_user
      responses:
        default:
          description: Default error sample response
      tags:
        - User
  /profile:
    summary: GET/PUT logged in user's profile
    get:
      summary: Get user's profile.
      description: >-
        If a user is logged in, get that user's settings from the server, and
        show them on the page. If no user is logged in, check localStorage for
        basic settings (light/dark mode, blocked tags) otherwise use default
        basic settings. Can be used to change settings.
      operationId: get_profile_page
      responses:
        default:
          description: Default error sample response
      tags:
        - User
    put:
      summary: Post changes to user's profile.
      description: >-
        If a user is logged in, put the changed settings to the server,
        otherwise store them in localStorage.
      operationId: put_profile
      responses:
        default:
          description: Default error sample response
      tags:
        - User
  /user:
    summary: GET a list of users
    get:
      summary: Get a list of users, sorted alphabetically.
      description: >-
        Get a list of users, sorted alphabetically. If there's a query string,
        only return the users whose usernames contain that query string. Each
        name should be linked to it's respective public profile.
      operationId: get_users
      responses:
        default:
          description: Default error sample response
      tags:
        - User
        - Search
  /user/{userID}:
    parameters:
      - name: userID
        in: path
        description: the ID of the user
        required: true
        schema:
          type: string
    summary: GET a user's public profile
    get:
      summary: Get a user's public profile.
      description: >-
        Get a webpage showing the specified user's public profile, including
        username, bio, email if user has decided to make that public, links to
        entries and comments, etc.
      operationId: get_public_profile
      responses:
        default:
          description: Default error sample response
      tags:
        - User
  /search:
    summary: GET/GET+query string search for entries
    get:
      summary: Get a list of entries selected and sorted by query string.
      description: >-
        Get a list of entries selected and sorted by query string. Default to
        all entries sorted by newest first.
      operationId: get_search_results
      responses:
        default:
          description: Default error sample response
      tags:
        - Entry
        - Search
  /keywords:
    summary: GET a list of defined keywords
    get:
      summary: Get a list of defined keywords
      description: >-
        Get a list of all used keywords, sorted alphabetically or by use count.
        If a query string is used, return only matching keywords.
      operationId: get_keyword_list
      responses:
        default:
          description: Default error sample response
      tags:
        - Keyword
        - Search
